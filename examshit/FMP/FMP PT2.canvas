{
	"nodes":[
		{"id":"da2cf3deb2e509aa","type":"text","text":"Central Node","x":-120,"y":-60,"width":250,"height":60,"color":"2"},
		{"id":"53c884071c1671d2","type":"text","text":"# Microcontroller \n\n## What is a microcontroller?\nA microcontroller is a small low cost microcomputer specifically designed to perform tasks in embedded system such as displaying information in microwave\n\nIt serves as a compact microcomputer that controls functions of embedded system found in various devices.\n\nit is also referred to as computer ona  chip as it integreates cpu, ram, rom, i/o, timers/counter and serial i/o in a single chip\n\nit is also known as embedded controller because it is typically built into the device it controls along with a supporting circuit.","x":-720,"y":180,"width":360,"height":540,"color":"6"},
		{"id":"62e3b6ec6a346c55","type":"text","text":"# MICROCONTROLLER CHP4","x":-540,"y":20,"width":360,"height":70,"color":"6"},
		{"id":"a77532275e09818a","type":"text","text":"# general blocks of microcontroller\n\n## Memory\n- Storage types: Microcontrollers use various memory spaces such as raa,rom eeprom and efprom to store both data and program.\n  - RAM: volatile memory used for temporary data storage.\n  - ROM, EPROM, EFPROM: non volatile memories used to store programs and operating parameters.\n  - Memory composition: A typical microcontroller has a defined amount of RAM and ROM to store program source code.\n---\n- Timers and COunters: They are essential features of microcontrollers handling or timing and counting operation within the system\n  - It often has more than one timer and counter\n  - Key operations of timer and counter include clock functions, modulation, pulse generation and frequency measurement\n  - External pulse counting: They can also be used for counting external pulses\n  - Watchdog TImer: it is a specialized function that detects software anomalies or malfunctions and can reset the processor when necessary.\n---\n- Parallel I/O: They are used to interface or drive various external devices such as LCDs, LEDs and printers.\n  -  These parts enable communication between the microcontroller and external devices by allowing data to be transmitted and received in parallel\n---\n- Serial Ports: They provide various serial interfaces between a microcontroller and peripheral devices like parallel ports.\n---\n- Interrupt Control: It is used to introduce a delay or interrupt execution of a working program.\n  - Types of interrupts:-\n  - external: Activated using an external interrupt pin\n  - INternal: triggered by an interrupt instruction within the program code\n- Special function block: \n  - Application: SOme microcontrollers are designed for specific applications such as space system and robotics and come with additional parts to handle specialized operations\n  - Functioning: THese additional features and parts make up what is referred to as special functioning block.\n ","x":-1260,"y":840,"width":400,"height":620,"color":"6"},
		{"id":"8b0a5ad008cd2acf","type":"text","text":"\n| Microprocessor                                                  | Microcontroller                               |\n| --------------------------------------------------------------- | --------------------------------------------- |\n| Only a general purpose computer CPU                             | It is a computer in of itself                 |\n| Memory, io ports, timers, interrupt are not available in chip   | All are integrated inside the chip            |\n| System becomes bulkier and expensive                            | Makes the system simple, economic and compact |\n| It has many opcodes for moving data from external memory to CPU | It has one or two opcode for moving the data  |\n| Higher accessing time required                                  | Low accessing time                            |\n| Very few number of bits allowed for instruction                 | Many bit handling instructions                |\n","x":-407,"y":1100,"width":825,"height":360,"color":"6"},
		{"id":"a007046630d6af38","type":"file","file":"Excalidraw/AVR ARCHITECTURE.md","x":-3200,"y":100,"width":580,"height":400,"color":"6"},
		{"id":"dc665220e87ea090","type":"text","text":"# AVR AND AVR FAMILY\n\n## avr microcontrollers\nthey are widely used in various applications, particulary for project prototyping and embedded devices\n\n---\nAVR is an 8bit microcontroller based on RISC architecture, it has been available since 1996 and features on chip programmable flash memory, I/O data space and EEPROM.\n\n---\navr was the first MCU to offer on chip flash storage making it a key player in microcontroller industry\n\n---\nAVR stands for advanced virtual RISC\n\n---\nIt is a single chip microprocessor with harvard architecture:-COde, ROM, Data rom, Ram, IO ports, Timers\n\n---\nIt supports several serial communication interfaces such as CAN, SPI and USART\n\n---\nit can be classified into\n1. Tiny\n2. Mega\n3. Special purpose\n4. Classic","x":-1820,"y":360,"width":400,"height":360,"color":"6"},
		{"id":"6b1f89ddfe74047b","type":"file","file":"Excalidraw/Functioning block.md","x":-2200,"y":1150,"width":400,"height":400,"color":"6"},
		{"id":"0865af0ebf77e07b","type":"text","text":"# Applications of microcontroller\n- Consumer electronic products:\n  1. Toys\n  2. Cameras\n  3. RObots\n  4. Microwave\n- Instrumentation and process control\n  1. Oscilloscopes\n  2. multimeter\n  3. data acquisition\n  4. leak current tester\n- Medical instrument\n  1. ECG\n  2. MRI\n  3. Electronic cardiac monitor\n  4. blood gas analyzer\n- Communication:\n  1. Cellphones\n  2. Telephone set\n  3. Answering Machines\n- office equipments:\n  1. Fax machine\n  2. Printers","x":-842,"y":1680,"width":435,"height":700,"color":"6"},
		{"id":"f31cc596de6f19a8","type":"text","text":"# Features of @Mega32 AVR\n- 2KB internal static ram\n---\n- 32KB in system self programmable flash program memory\n---\n- 1024 bytes of EEPROM for data storage\n---\n- 32 general purpose registers, each 8 bits.\n---\n- programmable serial USART\n---\n- Master/slave SPI serial interface\n---\n- two 8 bit timer/counter each with its own prescaler and compare mode\n---\n- 8 channel, ADC for analog signal\n---\n- 32 programmable io lines\n---\n- in system programming via an onchip boot program\n---\n- programmable watchdog timer with a dedicated onchip oscillator\n---\n- available in 40 pin DIP, 44 pad QFN/MLF and 44 lead QTFP packages","x":-1445,"y":-660,"width":370,"height":760,"color":"6"},
		{"id":"3ec2dc59c028f94b","type":"file","file":"Excalidraw/Memory organisation of @mega 32.md","x":-3600,"y":1100,"width":400,"height":400,"color":"6"},
		{"id":"80b5ad5f65c042b1","type":"text","text":"# Memory orgainsation of @mega32\n- Flash memory\n  1. Size 32kb of flash memory\n  2. stores the program code and is non volatile\n  3. it is organized into 16 bit words\n---\n- SRAM\n  1. 2KB of SRAM\n  2. it is used for storing variables intermediate results and stack data during program execution\n  3. SRAM is volatile, so it loses its content when power is removed\n---\n- EEPROM\n  1. 1KB of EEPROM\n  2. Non volatile memory that can be read and written to during program execution\n  3. Commonly used to store data that needs to persist even when power is off, such as configuration setting sor small user data\n---\n- IO registers\n  1. Memory mapped registers used for interfacing with peripheral and controlling microcontroller operations\n  2. used for configuring and managing peripherals such as GPIO, timers, UART, SPI, etc\n---\n- SFRs\n  1. provides control and status information for the CPU and peripherals\n  2. SFRs are used to configure microcontroller operations, manage interrupts and control power saving modes, they also include status flags and control bits for different micro controller functions.","x":-2870,"y":840,"width":370,"height":480,"color":"6"},
		{"id":"40f60fe74afc006c","type":"text","text":"# AVR architecture\n1. Databus: The avr microcontroller features an 8 bit parallel data bus, it allows data to travel within the MCU.\n---\n2. ALU- it serves as the core of the system, executing all commands and performing arithmetic and logical operations.\n---\n3. DATA SRAM: similar to ram found in computers, data SRAM provides temporary storage of data\n---\n4. EEPROM: This component functions like a hard disk  offering permanent storage for data that can electrically erased and reprogrammed.\n---\n5. i/o lines: these lines consists of series of registers that act as switches or controls for various features of avr microcontroller\n----\n6. 32x8 GPR: the avr includes 32 general purpose registers each 8 bits in size servving as general purpose storage space for data, while SRAM also provides temporary storage, these registser have more specific functions.\n---\n7. Status and control registers: these registers are crucial for the microntrollerâ€™s operation and management.\n---\n8. Program Counter: this register tracks the position of the currently executing program, ensuring that the processor knows which instruction to execute next.\n---\n9. Flash memory: Flash memory serves as permanent storage specifically for the program code written for the microcontroller\n---\n10. Instruction register and decoder: These components are important for the functionality of the MCU although they are less relevant to the end user.","x":-2390,"y":-660,"width":380,"height":410,"color":"6"},
		{"id":"6b78f0748219d10a","type":"text","text":"# AVR @MEGA32 chp5","x":418,"y":-10,"width":322,"height":60,"color":"4"},
		{"id":"c40c96e451e20579","type":"text","text":"# AVR io port operation\n- AVR family, the number of avaliable ports for io operations depends on the specific microcontroller.\n- for @mega32, 32 pings are available for io operations distributed across four ports, PORTA,B,C and D.\n- THese ports are programmed to perform specific input output tasks based on the applications' requirement\n- the number of ports and their configuration will vary depending on specific avr microcontroller model as different chips have different pin counts.","x":680,"y":240,"width":480,"height":380,"color":"4"},
		{"id":"4cbeaf3ce28d6b8a","type":"text","text":"# Registers of @mega32\n1. DDRX:\n   - The data direction register is used to configure the direction of the port pings as either input or output\n   - before reading or writing data from/to the ports, it is essential to set the direction of the correspondingpins using DDRx\n   - DDRx is a 8 bit internal register of AVR, the role of which is to set physical pin of port INPUT or output.\n\n| DDRx | Port type |\n| ---- | --------- |\n| 1    | o/p       |\n| 0    | i/p       |\nIf we want port B as output: DDRB = 0xFF and so on\n\n---\n2. PORTx:\n   - When a port is configured as output, the PORTx register is used to send data to corresponding pins\n   - writing to PORTx changes the output state of the pins according to the data\n   - Example: Output data in variable x to PORT A\n      DDRA=0xFF; PORTA = x';\n---\n3. PINx:\n   - The PINX register is used to read the data from port pins before reading data from a port, you need to set the portâ€™s data direction to input by configuring the corresponding, DDRx register bits to 0\n   - If the port is set as output reading the PINx register will return the data output on the port pins\n   - Input methods:\n     - Internal Pull-up: The port pins can be configured to single internal pull up registors\n     - tri-stated inputs: the port pins can be used as tri state inputs\n    Example: reading data from portA: DDRA = 0x00; x=PINA.","x":1240,"y":0,"width":640,"height":400,"color":"4"},
		{"id":"70b9693fe64c7ad5","type":"file","file":"Pasted image 20241016055547.png","x":1420,"y":-320,"width":600,"height":240,"color":"4"},
		{"id":"c6d70e731ca0b9b8","type":"file","file":"Output working of DDRx.png","x":2220,"y":280,"width":400,"height":214,"color":"4"},
		{"id":"29331f81ff86bdf1","type":"text","text":"# Output working of DDRx register\n1. The role of DDRx register is to set physical pin of port input or output\n2. When output device is connected with physical pin of avr, put 1 in DDRx register to make that port as an output port\n3. Tristate buffer which is connected with DDRx register will get enable as soon as it receives the 1\n4. Once it gets enabled the data from output device will transfer on the device through PINx register.","x":1800,"y":560,"width":460,"height":420,"color":"4"},
		{"id":"21694f835622e1d0","type":"text","text":"# C program for I/O programming of @Mega32 LED.\n```\nC\n#include<avr/io.h>\n#define F_CPU 16000000\n#include <util/delay.h>\nint main(void){\nDDRB = 0xFF;\nwhile(1){\nPORTB = 0b00010000;\n_delay_ms(1000);\nPORTB = 0b00000000;\n_delay_ms(1000);\n}\n}\n```","x":980,"y":720,"width":390,"height":480,"color":"4"},
		{"id":"3d04eefc3c0b3e5a","type":"text","text":"# ALP for I/O port programming ALP\n\n```\nALP\nSBI DDRB,2\nAGAIN: SBI PORTB,2\nCALL DELAY\nCBI PORTB,2\nCALL DELAY\nRJMP AGAIN\n```","x":1460,"y":840,"width":300,"height":360,"color":"4"},
		{"id":"0d4ecdfd2f510afe","type":"text","text":"# Timer in AVR microcontroller\n- TImers are useful when you need to set specific time intervals, similar to setting an alarm and can be extremely precise, even down to microseconds\n- In avr microcontroller, timers/counters are crucial components, the same hardware unit in MCU can function as either a timer or a counter, depending on how its configured.\n- THese units operate independently of the CPU, which makes them incredibly versatile for various applications\n- The SFRâ€™s used in timers are:\n  1. TCNTn: Timer/Counter register\n  2. TOVn: TImer overflow flag\n  3. TCCRn: Timer counter control register\n  4. OCRn: Output compare register","x":480,"y":-710,"width":520,"height":460,"color":"4"},
		{"id":"d579c911d272e9a7","type":"file","file":"Input working of DDRx.png","x":1050,"y":-580,"width":479,"height":190,"color":"4"},
		{"id":"98bf28afb278755f","type":"text","text":"# Input workign of DDRx\n- The role of DDRx register is to set physical pin of port input/output.\n- when i/p device is connected with physical pin of AVR, put 0 in DDRx register to make the part as an input port\n- Once it gets disabled the data from device will come to the PINx register","x":810,"y":-200,"width":380,"height":230,"color":"4"},
		{"id":"50cb20b1cd368d34","type":"file","file":"Timer structure.png","x":1259,"y":-1020,"width":543,"height":160},
		{"id":"f693005ddb65fff5","type":"text","text":"# TImer structure\n- TCTN:\n  1. Every timer has a timer/counter register\n  2. it resets upon zero and counts up with each clock pulse\n  3. you can read or write values to this register to access the current count or set a custom start value\n---\n- TOVn:\n  1. Each timer has a timer overflow flag\n  2. this flag gets set whenever the timer overflows\n  3. this flag can be used to trigger interrupts or other actions upon an overflow event\n---\n- TCCR:\n  1. This is the control register for configuring the mode of the timer\n  2. Using the register, you can select options such as normal mode, ctc mode and different prescalar setting\n---\n- OCRn:\n  1. The value in this register is continuously compared to the value in the TCNTn register\n  2. when both values become equal the OCFN is set\n  3. THis can be used for generating PWM signals, setting delays or triggering other events.","x":1802,"y":-1085,"width":437,"height":450,"color":"4"},
		{"id":"1f24fbc64e9ebc3a","type":"file","file":"Internal structure of timer0 as timer.png","x":100,"y":120,"width":400,"height":168,"color":"4"},
		{"id":"d5694e425ff0ed0b","type":"file","file":"internal structure of timer0 as counter.png","x":100,"y":320,"width":400,"height":186,"color":"4"},
		{"id":"2f8496b808f241f4","type":"text","text":"# AVR interrupts\n1. Timer interrupts:\n   - Overflow interrupts: triggered when timer overflows\n   - COmpare match interrupt: triggered when the timer reaches a specific compare value\n---\n2. External hardware interrupt:\n   - INTO: external interrupt triggered by a signal on PORTd-2\n   - INT1:- external interrupt triggered by portd.3\n   - int2: External interrupt triggared by portB.2\n---\n3. USART:\n   - Receiver complete interrupt\n   - Transmit complete interrupt\n   - data register empty interrupt\n---\n4. SPI:\n   - Triggered when on SPI transfer is completed\n---\n5. ADC interrupt:\n   - Triggered when ADC conversing is completed.\n","x":2340,"y":-980,"width":700,"height":640,"color":"4"},
		{"id":"66b999bed654050c","type":"text","text":"# Baudrate\n- The baudrate is the rate at which data is transferred or received in a communication channel\n- its measured in bits per second\n- in binary system, the baudrate directly represents the number of bits transmitted per second\n---\ncommon standard baudrates are:\n- 1200\n- 2400\n- 4800\n- 9600\n- 19200\n- 115200\n- 9600 is widely used in many serial communication system.","x":2181,"y":-240,"width":879,"height":400,"color":"4"},
		{"id":"942bb34aa94bfec2","type":"text","text":"# PENTIUM CHAP 6","x":-134,"y":-260,"width":279,"height":90,"color":"3"},
		{"id":"115da36eece05872","type":"text","text":"# Features of pentium processor\n- Fifth generation microprocessor: It was introudced in 1993 as a port of 5th generation microprocessor\n- Clock speed: it operates at a speed ranging from 60 mhz to 233 mhz\n- 32-bit processor: the processor features a 32 bit architecture with a 64 bit data bus\n- dual alu: it contains two separate alu, each capable of performing 32 bit operation, supported by 5 memory banks\n- superscaler design: the processor is 2 way superscale utilizing a pipeline the U pipe and V pipe.\n- 32 bit address bus: the address bus is 32 bit, enabling access up to 4 gb of memory\n- integer pipelining: it supports a 5 stage integer pipelining for faster data processing\n- floating point unit: the on chip floating point unit features an 8 stage pipeline for single operations\n- branch prediction: it includes branch prediction logic with a 256 entry branch target buffer.\n- on chip cache/memory: the processor has on chip memory with\n  - 8 kb instruction cache\n  - 8 kb data cache","x":-580,"y":-1180,"width":364,"height":920,"color":"3"},
		{"id":"51e2fec0f33b9d13","type":"text","text":"# Prefetch Buffer\n- The processor contains 32 byte prefetch buffer \n---\n- these buffers operate independently but not simultaneously\n----\n- one prefetch buffer sequentially fetches instructions until a branch instruction is encountered.","x":-160,"y":-1100,"width":380,"height":420,"color":"3"},
		{"id":"e8829c47d5e64b4e","type":"file","file":"Pasted image 20241016071545.png","x":-191,"y":-1660,"width":443,"height":380,"color":"3"},
		{"id":"cbddd02c5d3fe758","type":"text","text":"# Execution unit\n- Execution unit consists of two integer pipelines, the u pipe and v pipe, each with its own alu\n- these pipelines operate through five stages:\n  1. Prefetch\n  2. decode-1\n  3. decode-2\n  4. execute\n  5. write back\n- the u pipe handles the execution of a integer and floating point instructions\n- the v pipe executes simple integer and same floating point instructions.","x":60,"y":-680,"width":380,"height":405,"color":"3"},
		{"id":"df88e5c21ab8037d","type":"text","text":"# Super scale architecture\n1. BIU:\n   - BIU manages all system buses at the microprocessor unit\n   - it is responsible for addressing of both memory and io devices\n   - it features a 64 bit data bus and 32 bit address bus\n---\n2. Superscale structure:\n   - Superscalar architecture refers to the presence of more than one execution unit\n   - the pentium processor contains two integer units:\n     - u pipe\n     - v pipe\n    - each integer unit is equipped with a 32 bit alu\n    - with these two execution units the pentium performance is effectively doubled\n---\n4. Prefetch unit:\n   - The prefetch unit implements a five stage pipelining process\n   - it contains a pair of 32 byte prefetch buffer, which operates independently but not simultaneously\n---\n4. Branch prediction unit:\n   - The branch prediction unit plays a crucial role in predicting branch instruction, preventing pipeline stalling\n   - branch instruction can cause pipeline stalling, which degrades execution performance\n   - branch prediction helps anticipate branch instructions, using a 256 entry branch target buffer\n---\n5. Execution unit:\n   - pentium processor has two execution units that operate in parallel\n   - each execution unti contains a 32 bit alu\n   - as instructions are executed, the register set is updated accordingly\n---\n6. cache memory:\n   - the pentium processor features integrated cache memory, enchanting execution speed\n   - it has a 16 kb split cache, with separate memory for data and code, integrated on the chip\n---\n7. floating point unit:\n   - fpu is responsible for executing floating point instructions, significantly enhancing the microprocessorâ€™s capabilities for graphics and multimedia applications.\n   - it supports an 5 stage pipeline, improving the efficiency of floating point operations\n   - fpu features dedicated hardware circuits for operations such as multiplication, division, addition and boosting overall performance\n   - it supports single-double and extended precision floating point operations, utilizing eight 80 bits registers.","x":-874,"y":-2020,"width":434,"height":740,"color":"3"},
		{"id":"d8ffa28cf0242fa9","type":"file","file":"superscalr architecture.png","x":-798,"y":-2560,"width":624,"height":320,"color":"3"},
		{"id":"31c0045aeb902342","type":"text","text":"# Pipeling of pentium processor\n1. The pentium processor features two integer units, referred as the U and V pipelines, each equipped with its own ALU and other components.\n---\n2. this design allows the pentium to execute two integer instructions in a single clock cyclle using both pipelines, resulting in significantly enhanced performance\n---\n4. each pentium pipeline operates on five stage pipelining process:\n   - Prefetch: this stage fetches instruction from code cache\n   - decode 1: in this stage, two instructions are decoded in parallel, it also checks for dependencies between them, if there are no dependencies, the instructions are dispatched to the U and V pipelines, and a control word is generated.\n---\n5. Decode 2: this stage decodes the control word and computes the data address needed for execution\n---\n6. Execute: the processor retrieves the neccessary data from the data cache and registers to perform alu operations\n---\n7. write back: in the final stage, the results are written back to the registers, updating flags and data at a specified address","x":360,"y":-2560,"width":560,"height":960,"color":"3"},
		{"id":"25d745b967358cec","type":"file","file":"Pasted image 20241016073815.png","x":379,"y":-3200,"width":541,"height":400},
		{"id":"1114199737a23d51","type":"text","text":"# Branch Prediction\n- Branch prediction logic is used to prevent flushing of pipeline\n- suppose instruction 13 is a conditional jump to 150 at some other address, then the instructuion that entered after 13 is invalid and new seuquence beginning with 150 is needed to be loaded in\n- this causes bubbles in pipeline where no work is done as the pipelin stages are reloaded\n- this is called flushing of pipeline problem","x":-194,"y":-2120,"width":454,"height":340,"color":"3"}
	],
	"edges":[
		{"id":"e8d91f20f7607419","fromNode":"62e3b6ec6a346c55","fromSide":"top","toNode":"da2cf3deb2e509aa","toSide":"left"},
		{"id":"39ec9033abd73bd2","fromNode":"53c884071c1671d2","fromSide":"top","toNode":"62e3b6ec6a346c55","toSide":"bottom"},
		{"id":"79da7545a8f416e7","fromNode":"6b1f89ddfe74047b","fromSide":"right","toNode":"a77532275e09818a","toSide":"left"},
		{"id":"cdf186de4cd81d53","fromNode":"a77532275e09818a","fromSide":"top","toNode":"53c884071c1671d2","toSide":"left"},
		{"id":"2626c53080d04226","fromNode":"8b0a5ad008cd2acf","fromSide":"top","toNode":"53c884071c1671d2","toSide":"bottom"},
		{"id":"467818999915d553","fromNode":"8b0a5ad008cd2acf","fromSide":"left","toNode":"a77532275e09818a","toSide":"right"},
		{"id":"926a3be6a5bf4544","fromNode":"0865af0ebf77e07b","fromSide":"top","toNode":"53c884071c1671d2","toSide":"bottom"},
		{"id":"414ef48f9800735a","fromNode":"0865af0ebf77e07b","fromSide":"top","toNode":"a77532275e09818a","toSide":"right"},
		{"id":"589ada9db0939daa","fromNode":"dc665220e87ea090","fromSide":"right","toNode":"53c884071c1671d2","toSide":"left"},
		{"id":"91afae08545e4231","fromNode":"6b1f89ddfe74047b","fromSide":"top","toNode":"dc665220e87ea090","toSide":"left"},
		{"id":"509d3d36bc66dd1b","fromNode":"dc665220e87ea090","fromSide":"left","toNode":"6b1f89ddfe74047b","toSide":"top"},
		{"id":"36f73668007b2620","fromNode":"a77532275e09818a","fromSide":"left","toNode":"6b1f89ddfe74047b","toSide":"right"},
		{"id":"e022a8ea0f30dc17","fromNode":"a007046630d6af38","fromSide":"right","toNode":"dc665220e87ea090","toSide":"left"},
		{"id":"e988d4a1c507a805","fromNode":"dc665220e87ea090","fromSide":"left","toNode":"a007046630d6af38","toSide":"right"},
		{"id":"a83c15de18fb605d","fromNode":"40f60fe74afc006c","fromSide":"bottom","toNode":"dc665220e87ea090","toSide":"top"},
		{"id":"f5a9b33bbd086ffe","fromNode":"a007046630d6af38","fromSide":"right","toNode":"40f60fe74afc006c","toSide":"left"},
		{"id":"5503b2a8cd03e0b4","fromNode":"40f60fe74afc006c","fromSide":"left","toNode":"a007046630d6af38","toSide":"top"},
		{"id":"d044bd9636f7db21","fromNode":"f31cc596de6f19a8","fromSide":"left","toNode":"dc665220e87ea090","toSide":"top"},
		{"id":"948afb1d93012b9a","fromNode":"3ec2dc59c028f94b","fromSide":"right","toNode":"80b5ad5f65c042b1","toSide":"left"},
		{"id":"3d35042d87442ebb","fromNode":"80b5ad5f65c042b1","fromSide":"top","toNode":"40f60fe74afc006c","toSide":"bottom"},
		{"id":"1e78ba59cf93ceb9","fromNode":"80b5ad5f65c042b1","fromSide":"top","toNode":"f31cc596de6f19a8","toSide":"left"},
		{"id":"df488c6032c4808a","fromNode":"6b78f0748219d10a","fromSide":"left","toNode":"da2cf3deb2e509aa","toSide":"right"},
		{"id":"1a2691f1e81ac8a6","fromNode":"c40c96e451e20579","fromSide":"top","toNode":"6b78f0748219d10a","toSide":"right"},
		{"id":"e5df265ee3e57272","fromNode":"4cbeaf3ce28d6b8a","fromSide":"left","toNode":"6b78f0748219d10a","toSide":"right"},
		{"id":"0744d757fd206862","fromNode":"70b9693fe64c7ad5","fromSide":"left","toNode":"4cbeaf3ce28d6b8a","toSide":"left"},
		{"id":"51eba663dba009ec","fromNode":"d579c911d272e9a7","fromSide":"bottom","toNode":"98bf28afb278755f","toSide":"top"},
		{"id":"13c1071e2f3ad165","fromNode":"98bf28afb278755f","fromSide":"bottom","toNode":"4cbeaf3ce28d6b8a","toSide":"left"},
		{"id":"acb5e8d9fcc6dda8","fromNode":"98bf28afb278755f","fromSide":"bottom","toNode":"6b78f0748219d10a","toSide":"right"},
		{"id":"adb16e8f7ed80c47","fromNode":"29331f81ff86bdf1","fromSide":"top","toNode":"4cbeaf3ce28d6b8a","toSide":"right"},
		{"id":"908da4996e70867c","fromNode":"c6d70e731ca0b9b8","fromSide":"left","toNode":"29331f81ff86bdf1","toSide":"top"},
		{"id":"bb6dd3e906fd589c","fromNode":"21694f835622e1d0","fromSide":"top","toNode":"4cbeaf3ce28d6b8a","toSide":"bottom"},
		{"id":"d6987b0e2691f8e3","fromNode":"3d04eefc3c0b3e5a","fromSide":"top","toNode":"21694f835622e1d0","toSide":"top"},
		{"id":"36d913adb6e99873","fromNode":"3d04eefc3c0b3e5a","fromSide":"top","toNode":"4cbeaf3ce28d6b8a","toSide":"bottom"},
		{"id":"8b673c4a43eb8f67","fromNode":"21694f835622e1d0","fromSide":"top","toNode":"3d04eefc3c0b3e5a","toSide":"top"},
		{"id":"031848fdc302a3e1","fromNode":"0d4ecdfd2f510afe","fromSide":"left","toNode":"6b78f0748219d10a","toSide":"right"},
		{"id":"457a73e41e33ee18","fromNode":"50cb20b1cd368d34","fromSide":"left","toNode":"0d4ecdfd2f510afe","toSide":"top"},
		{"id":"36673a399e0ef42b","fromNode":"1f24fbc64e9ebc3a","fromSide":"right","toNode":"6b78f0748219d10a","toSide":"bottom"},
		{"id":"8fce975165e442e0","fromNode":"d5694e425ff0ed0b","fromSide":"right","toNode":"1f24fbc64e9ebc3a","toSide":"right"},
		{"id":"65a06c8dc89cb7b7","fromNode":"1f24fbc64e9ebc3a","fromSide":"right","toNode":"0d4ecdfd2f510afe","toSide":"bottom"},
		{"id":"3ea11f61c75de5fb","fromNode":"f693005ddb65fff5","fromSide":"bottom","toNode":"1f24fbc64e9ebc3a","toSide":"right"},
		{"id":"d178dabe3f441a11","fromNode":"2f8496b808f241f4","fromSide":"left","toNode":"4cbeaf3ce28d6b8a","toSide":"right"},
		{"id":"0a7c3adc4b0f74a7","fromNode":"2f8496b808f241f4","fromSide":"left","toNode":"6b78f0748219d10a","toSide":"right"},
		{"id":"512c127e7583b192","fromNode":"66b999bed654050c","fromSide":"left","toNode":"6b78f0748219d10a","toSide":"right"},
		{"id":"42c7000f9dfc0c90","fromNode":"942bb34aa94bfec2","fromSide":"bottom","toNode":"da2cf3deb2e509aa","toSide":"top"},
		{"id":"06c0777a2bd5a590","fromNode":"115da36eece05872","fromSide":"right","toNode":"942bb34aa94bfec2","toSide":"top"},
		{"id":"f92638c2b7615086","fromNode":"51e2fec0f33b9d13","fromSide":"bottom","toNode":"942bb34aa94bfec2","toSide":"top"},
		{"id":"e5e4a37aa37c10e1","fromNode":"e8829c47d5e64b4e","fromSide":"bottom","toNode":"51e2fec0f33b9d13","toSide":"top"},
		{"id":"748d68d4cc87f0f1","fromNode":"cbddd02c5d3fe758","fromSide":"left","toNode":"942bb34aa94bfec2","toSide":"top"},
		{"id":"4d8fcef9ece7877e","fromNode":"df88e5c21ab8037d","fromSide":"bottom","toNode":"942bb34aa94bfec2","toSide":"top"},
		{"id":"ef045a070399a7c2","fromNode":"df88e5c21ab8037d","fromSide":"top","toNode":"d8ffa28cf0242fa9","toSide":"bottom"},
		{"id":"9fc7988888c940cc","fromNode":"d8ffa28cf0242fa9","fromSide":"bottom","toNode":"df88e5c21ab8037d","toSide":"top"},
		{"id":"0b651d1ab7d408b2","fromNode":"31c0045aeb902342","fromSide":"bottom","toNode":"942bb34aa94bfec2","toSide":"top"},
		{"id":"ae7d0b2e4a179c2f","fromNode":"25d745b967358cec","fromSide":"bottom","toNode":"31c0045aeb902342","toSide":"top"},
		{"id":"5d01a18a99d39528","fromNode":"1114199737a23d51","fromSide":"bottom","toNode":"942bb34aa94bfec2","toSide":"top"}
	]
}