{
	"nodes":[
		{"id":"f85094ec76ee6ffb","x":-1640,"y":1080,"width":250,"height":60,"type":"text","text":""},
		{"id":"0e211d01bd7dbc54","type":"text","text":"CENTRAL NODE","x":-120,"y":-20,"width":250,"height":60,"color":"6"},
		{"id":"228fcf71a9c61079","x":-460,"y":100,"width":250,"height":60,"color":"4","type":"text","text":"QB FINALS"},
		{"id":"f1fb50e6c00b4f01","x":-680,"y":280,"width":250,"height":60,"color":"4","type":"text","text":"UNIT 1"},
		{"id":"d01647f9088be32e","x":-1310,"y":-240,"width":440,"height":400,"color":"4","type":"text","text":"# Big O\n## O(1)\nAn algorithm has a time complexity of O(1) if the execution time remains constant regardless of input size. this means that the algorithm performs a fixed number of operations\n\n## O(n)\nAn algorithm has a time complexity of O(n) if the execution time grows linearly with the input size, this means that if the input size doubles, the execution time also doubles\n\n## O(n2)\nAn algorithm has a time complexity of O(n2) if the execution time grows quadratically with the input size this is the typical for algorithms that involve nested iterations over the data set\n\n## O(n3)\nAn algorithm has a time complexity of O(n3) if the execution times grows cubically with the input size. this is common in algorithms that involve three nested iterations\n\n## O(log n)\nAn algorithm has a time complexity of O(log n) if the execution time grows logarithmic with the input size. this is typical in algorithms that involve logarithmic iterations"},
		{"id":"cbe07ce71fa5daef","x":-820,"y":840,"width":500,"height":860,"color":"4","type":"text","text":"# Linear and non linear data #DIFF \n\n| Points             | Linear Data Structure                                | Non Linear Data Structure                                                    |\n| ------------------ | ---------------------------------------------------- | ---------------------------------------------------------------------------- |\n| Arrangement        | Elements are arranged sequentially one after another | Elements are arranged in a hierarchical or interconnected manner             |\n| Complexity         | Easier to implement and understand                   | More complex involving intricate relationships and connections               |\n| Levels             | All elements exist at a single level                 | Elements can exist at multiple levels                                        |\n| Traversal          | Simple traversal methods                             | More complex traversal methods often requiring recursion                     |\n| Memory Utilization | Typically fixed size which may lead to wasted space  | More dynamic often utilizing memory efficiently based on relationships       |\n| Time Complexity    | Generally O(n) for basic operations                  | Varies widely can be optimized for specific operations                       |\n| Applications       | Commonly used in stacks queues and arrays            | Used in databases, ai and complex data representations like trees and graphs |\n| Examples           | Array, linked list, stack                            | Tree, graph, hash table                                                      |\n"},
		{"id":"d704cfefabc04a43","x":-1640,"y":340,"width":500,"height":400,"color":"4","type":"text","text":"# Time Complexity \nis defined as terms of how many times it takes to run a given algorithms based on length of the input\n\nTime complexity is a type of computational complexity that describes the time required to execute an algorithm\n\nTC(Time complexity) = C(constant) + TP(instances)\n\nfor example: S = 0; is constant\nfor(i =0; i<n;i++) is an instance of n\n\nS=s+a[i] is a constant\nfor(i=1;i<n;i*=2) is an instance of log n"}
	],
	"edges":[
		{"id":"f9a4a1af6c80beba","fromNode":"228fcf71a9c61079","fromSide":"top","toNode":"0e211d01bd7dbc54","toSide":"left"},
		{"id":"4dd9fe453bbeb664","fromNode":"f1fb50e6c00b4f01","fromSide":"right","toNode":"228fcf71a9c61079","toSide":"bottom"},
		{"id":"ca3ad7d264bd81d1","fromNode":"cbe07ce71fa5daef","fromSide":"top","toNode":"f1fb50e6c00b4f01","toSide":"bottom"},
		{"id":"fd36fe9fad1e27d9","fromNode":"d704cfefabc04a43","fromSide":"right","toNode":"f1fb50e6c00b4f01","toSide":"left"},
		{"id":"7affa14e566ce16e","fromNode":"d01647f9088be32e","fromSide":"right","toNode":"f1fb50e6c00b4f01","toSide":"top"}
	]
}